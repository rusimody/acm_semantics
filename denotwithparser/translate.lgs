The semantic functions (the interpreter)

te gives the semantics of expressions and ts that of statements

> te : Exp       -> Expmodel
> ts : Statement -> Stmtmodel

> te.(Icon.i).state     = Ival.i
> te.(Bcon.b).state     = Bval.b
> te.(Var.v).state      = lookup.state.v
> te.(t `Add` t').state = te.t.state `plusmodel` te.t'.state
> te.(t `Sub` t').state = te.t.state `minusmodel` te.t'.state
> te.(t `Mul` t').state = te.t.state `mulmodel` te.t'.state
> te.(t `Div` t').state = te.t.state `divmodel` te.t'.state
> te.(And.t.t').state   = te.t.state `andmodel` te.t'.state
> te.(Or.t.t').state    = te.t.state `ormodel` te.t'.state
> te.(Less.t.t').state  = te.t.state `lessmodel` te.t'.state
> te.(Eql.t.t').state   = te.t.state `eqmodel` te.t'.state

> ts.Skip.state          = state
> ts.Abort.state         = error."Program aborted"
> ts.(Assgn.v.t).state   = setstate.state.v.(te.t.state)
> ts.(s1 `Seq` s2).state = (ts.s1;ts.s2).state
> ts.(If1.be.s).state    = (if1model.(te.be).(ts.s)).state

> ts.(Ifelse.be.s.s').state = (ifelsemodel.(te.be).(ts.s).(ts.s')).state
> ts.(While.be.s).state     = (whilemodel.(te.be).(ts.s)).state

----------------------------------------------------------------------
